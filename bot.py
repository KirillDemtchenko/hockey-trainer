import logging
import os
import json
import datetime
import calendar

from aiogram import Bot, Dispatcher, types

# –õ–æ–≥–≥–µ—Ä
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
link_map = load_json("data/link_map.json")
workout_sets = load_json("data/workout_sets.json")

# –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–Ω—è—Ö –Ω–µ–¥–µ–ª–∏
day_info = {
    "MONDAY": {"ru": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "eng": "Monday"},
    "TUESDAY": {"ru": "–≤—Ç–æ—Ä–Ω–∏–∫", "eng": "Tuesday"},
    "WEDNESDAY": {"ru": "—Å—Ä–µ–¥—É", "eng": "Wednesday"},
    "THURSDAY": {"ru": "—á–µ—Ç–≤–µ—Ä–≥", "eng": "Thursday"},
    "FRIDAY": {"ru": "–ø—è—Ç–Ω–∏—Ü—É", "eng": "Friday"},
    "SATURDAY": {"ru": "—Å—É–±–±–æ—Ç—É", "eng": "Saturday"},
    "SUNDAY": {"ru": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "eng": "Sunday"}
}

# –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –∫–æ–¥—ã
ru_to_code = {v["ru"].capitalize(): k for k, v in day_info.items()}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
def format_exercises(exercises):
    formatted = []
    for ex, reps in exercises.items():
        if ex not in link_map:
            log.warning(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '{ex}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        formatted.append(f"{link_map.get(ex, ex)} ‚Äî {reps}")
    return formatted

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"))
    await message.reply("–ö–∞–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=keyboard)

async def hockey_train(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    days = [types.KeyboardButton(day) for day in ru_to_code.keys()]
    keyboard.add(*days)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)

async def handle_day_selection(message: types.Message):
    selected_day_ru = message.text.capitalize()
    selected_day_code = ru_to_code.get(selected_day_ru)

    if not selected_day_code:
        await message.reply(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    workout = build_workout(selected_day_code)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))

    await message.reply(
        workout,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(hockey_train, text=['–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'])
    dp.register_message_handler(handle_day_selection, text=list(ru_to_code.keys()))
    log.debug('Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

async def process_event(event, dp: Dispatcher):
    update = json.loads(event['body'])
    log.debug('Update: %s', update)
    Bot.set_current(dp.bot)
    await dp.process_update(types.Update.to_object(update))

async def handler(event, context):
    if event.get('httpMethod') == 'POST':
        token = os.environ.get('TELEGRAM_TOKEN')
        if not token:
            log.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return {'statusCode': 500, 'body': 'Internal Server Error'}

        bot = Bot(token)
        dp = Dispatcher(bot)
        await register_handlers(dp)
        await process_event(event, dp)
        return {'statusCode': 200, 'body': 'ok'}

    return {'statusCode': 405, 'body': 'Method Not Allowed'}

# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def build_workout(day=None):
    if day is None:
        day = today_day()

    day_data = day_info.get(day, {})
    msg_intro = f"üí™ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {day_data.get('ru', day.lower())}:*\n\n"

    special_days = {
        "TUESDAY": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 7:30! üèí",
        "FRIDAY": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 7:30! üèí"
    }

    if day in special_days:
        return special_days[day]

    today_set = workout_sets.get(day, {})

    if not today_set:
        return f"{msg_intro}–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç üôÖ‚ôÇÔ∏è"

    exercise_msg = "\n".join([
        f"*{k}:*\n" + "\n".join(f"  ‚ñ™Ô∏è {l}" for l in format_exercises(v))
        for k, v in today_set.items()
    ])

    return f"{msg_intro}{exercise_msg}"

def today_day():
    return datetime.date.today().strftime("%A").upper()

def dict_intersection(d1, d2):
    return {key: d2.get(key, d1[key]) for key in d1.keys() & d2.keys()}
