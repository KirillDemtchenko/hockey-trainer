import logging
import os
import json
import datetime
import calendar

from aiogram import Bot, Dispatcher, types

# –õ–æ–≥–≥–µ—Ä
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON
def load_json(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."""
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º link_map –∏–∑ JSON-—Ñ–∞–π–ª–∞
link_map = load_json("data/link_map.json")

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
day_mapping = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "MONDAY",
    "–í—Ç–æ—Ä–Ω–∏–∫": "TUESDAY",
    "–°—Ä–µ–¥–∞": "WEDNESDAY",
    "–ß–µ—Ç–≤–µ—Ä–≥": "THURSDAY",
    "–ü—è—Ç–Ω–∏—Ü–∞": "FRIDAY",
    "–°—É–±–±–æ—Ç–∞": "SATURDAY",
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "SUNDAY"
}

day_ru = {
    "MONDAY": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "TUESDAY": "–≤—Ç–æ—Ä–Ω–∏–∫",
    "WEDNESDAY": "—Å—Ä–µ–¥—É",
    "THURSDAY": "—á–µ—Ç–≤–µ—Ä–≥",
    "FRIDAY": "–ø—è—Ç–Ω–∏—Ü—É",
    "SATURDAY": "—Å—É–±–±–æ—Ç—É",
    "SUNDAY": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
def format_exercises(exercises):
    formatted_exercises = []
    for ex, reps in exercises.items():
        ex_with_link = link_map.get(ex, ex)  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        formatted_exercises.append(f"{ex_with_link} ‚Äî {reps}")
    return formatted_exercises

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')

    keyboard_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    btns_text = ('–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!',)
    keyboard_markup.row(*(types.KeyboardButton(text) for text in btns_text))

    await message.reply("–ö–∞–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=keyboard_markup)

async def hockey_train(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è –¥–ª—è —Ö–æ–∫–∫–µ–π–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard_markup = types.ReplyKeyboardMarkup(
        row_width=3, 
        resize_keyboard=True, 
        one_time_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    )
    days_ru = list(day_mapping.keys())
    buttons = [types.KeyboardButton(day) for day in days_ru]
    keyboard_markup.add(*buttons)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard_markup)

async def handle_day_selection(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    selected_day_ru = message.text
    selected_day_en = day_mapping.get(selected_day_ru)
    
    if not selected_day_en:
        await message.reply(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=types.ReplyKeyboardRemove(),
            disable_web_page_preview=True
        )
        return
    
    workout = build_workout(selected_day_en)
    await message.reply(
        workout, 
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove(),
        disable_web_page_preview=True
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(hockey_train, text='–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!')
    dp.register_message_handler(handle_day_selection, text=list(day_mapping.keys()))
    log.debug('Handlers are registered.')

async def process_event(event, dp: Dispatcher):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ Yandex.Cloud"""
    update = json.loads(event['body'])
    log.debug('Update: %s', update)

    Bot.set_current(dp.bot)
    await dp.process_update(types.Update.to_object(update))

async def handler(event, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π Yandex.Cloud"""
    if event.get('httpMethod') == 'POST':
        token = os.environ.get('TELEGRAM_TOKEN')
        if not token:
            log.error("TELEGRAM_TOKEN is not set")
            return {'statusCode': 500, 'body': 'Internal Server Error'}

        bot = Bot(token)
        dp = Dispatcher(bot)

        await register_handlers(dp)
        await process_event(event, dp)

        return {'statusCode': 200, 'body': 'ok'}

    return {'statusCode': 405, 'body': 'Method Not Allowed'}

# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def build_workout(day=None):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –¥–µ–Ω—å"""
    if day is None:
        day = today_day()
    exercises_set = load_json("data/exercise_inventory.json")
    workout_sets = load_json("data/workout_sets.json")

    msg_intro = f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {day_ru.get(day, day.lower())}: \n"

    special_days = {
        "TUESDAY": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí",
        "THURSDAY": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí"
    }

    if day in special_days:
        return special_days[day]

    today_set = workout_sets.get(day, {})
    exercise_msg = "\n".join([
        f"{k}:\n" + "\n".join(f"  ‚ñ™Ô∏è {l}" for l in format_exercises(v))
        for k, v in today_set.items()
    ])

    return f"{msg_intro}\n{exercise_msg}"

def today_day():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
    return calendar.day_name[datetime.date.today().weekday()].upper()

def dict_intersection(d1, d2):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π"""
    return {key: d2.get(key, d1[key]) for key in d1.keys() & d2.keys()}