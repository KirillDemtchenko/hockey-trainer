import logging
import os
import json
import datetime
import calendar
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TrainingStates(StatesGroup):
    choosing_day_hockey = State()
    choosing_day_running = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_json(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

link_map = load_json("data/link_map.json")
workout_sets = load_json("data/workout_sets.json")
run_plan = load_json("data/run.json")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–•–æ–∫–∫–µ–π–Ω—É—é!"))
    builder.add(KeyboardButton(text="–ë–µ–≥–æ–≤—É—é!"))
    return builder.as_markup(resize_keyboard=True)

def create_day_keyboard():
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞",
            "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    builder = ReplyKeyboardBuilder()
    for day in days:
        builder.add(KeyboardButton(text=day))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_exercises(exercises):
    return [f"{link_map.get(ex, ex)} ‚Äî {reps}" for ex, reps in exercises.items()]

def translate_day(ru_day):
    days = {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "MONDAY",
        "–í—Ç–æ—Ä–Ω–∏–∫": "TUESDAY",
        "–°—Ä–µ–¥–∞": "WEDNESDAY",
        "–ß–µ—Ç–≤–µ—Ä–≥": "THURSDAY",
        "–ü—è—Ç–Ω–∏—Ü–∞": "FRIDAY",
        "–°—É–±–±–æ—Ç–∞": "SATURDAY",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "SUNDAY"
    }
    return days.get(ru_day, "MONDAY")

def today_day():
    return datetime.datetime.now().strftime("%A").upper()

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def build_workout(selected_day=None):
    selected_day = selected_day or today_day()
    special_days = {
        "TUESDAY": "–°–µ–≥–æ–¥–Ω—è –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí",
        "THURSDAY": "–°–µ–≥–æ–¥–Ω—è –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí"
    }

    if selected_day in special_days:
        return special_days[selected_day]

    workout = workout_sets.get(selected_day, {})
    msg = [f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {selected_day}:\n"]
    for category, exercises in workout.items():
        msg.append(f"{category}:")
        msg.extend([f"  ‚ñ™Ô∏è {ex}" for ex in format_exercises(exercises)])
    return "\n".join(msg)

def build_running(selected_day=None):
    selected_day = selected_day or today_day()
    week_runs = run_plan.get("1-—è –Ω–µ–¥–µ–ª—è", {})
    return f"*–ë–µ–≥ {selected_day}:*\n{week_runs.get(selected_day, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
dp = Dispatcher()
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!",
        reply_markup=create_main_keyboard()
    )

@dp.message(F.text == "–•–æ–∫–∫–µ–π–Ω—É—é!")
async def hockey_selected(message: types.Message, state: FSMContext):
    await state.set_state(TrainingStates.choosing_day_hockey)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=create_day_keyboard())

@dp.message(F.text == "–ë–µ–≥–æ–≤—É—é!")
async def running_selected(message: types.Message, state: FSMContext):
    await state.set_state(TrainingStates.choosing_day_running)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=create_day_keyboard())

@dp.message(TrainingStates.choosing_day_hockey)
async def process_hockey_day(message: types.Message, state: FSMContext):
    await state.clear()
    day_en = translate_day(message.text)
    await message.answer(build_workout(day_en), parse_mode="Markdown")

@dp.message(TrainingStates.choosing_day_running)
async def process_running_day(message: types.Message, state: FSMContext):
    await state.clear()
    day_en = translate_day(message.text)
    await message.answer(build_running(day_en), parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Yandex Cloud
async def handler(event, context):
    if not os.getenv("TELEGRAM_TOKEN"):
        return {"statusCode": 500, "body": "TELEGRAM_TOKEN not set"}

    try:
        update = types.Update.model_validate(json.loads(event['body']))
        await dp.feed_update(bot, update)
        return {"statusCode": 200}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return {"statusCode": 500, "body": str(e)}
