import logging
import os
import json
import calendar
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –õ–æ–≥–≥–µ—Ä
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.environ.get("TELEGRAM_TOKEN")
bot = Bot(TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class TrainingState(StatesGroup):
    choosing_training = State()
    choosing_day = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON

def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

link_map = load_json("data/link_map.json")
workout_sets = load_json("data/workout_sets.json")
week_runs = load_json("data/run.json")

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
train_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
train_keyboard.row(KeyboardButton("–•–æ–∫–∫–µ–π–Ω—É—é"), KeyboardButton("–ë–µ–≥–æ–≤—É—é"))

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
days_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
days_keyboard.row(*[KeyboardButton(day) for day in calendar.day_name])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=train_keyboard)
    await state.set_state(TrainingState.choosing_training)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@dp.message(TrainingState.choosing_training)
async def choose_training(message: types.Message, state: FSMContext):
    training_type = message.text
    if training_type not in ["–•–æ–∫–∫–µ–π–Ω—É—é", "–ë–µ–≥–æ–≤—É—é"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –∫–Ω–æ–ø–∫–∏!")
        return

    await state.update_data(training_type=training_type)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_keyboard)
    await state.set_state(TrainingState.choosing_day)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@dp.message(TrainingState.choosing_day)
async def choose_day(message: types.Message, state: FSMContext):
    day = message.text.upper()
    if day not in calendar.day_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Å –∫–Ω–æ–ø–∫–∏!")
        return

    user_data = await state.get_data()
    training_type = user_data.get("training_type")

    if training_type == "–•–æ–∫–∫–µ–π–Ω—É—é":
        response = build_workout(day)
    else:
        response = build_running(day)

    await message.answer(response, parse_mode="Markdown")
    await state.clear()

# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def build_workout(day):
    today_set = workout_sets.get(day.upper(), {})
    exercise_msg = "\n".join(
        [f"{k}:\n" + "\n".join(f"  ‚ñ™Ô∏è {l}" for l in format_exercises(v)) for k, v in today_set.items()]
    )
    return f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {day}:\n\n{exercise_msg}"

def build_running(day):
    run = week_runs.get("1-—è –Ω–µ–¥–µ–ª—è", {}).get(day.upper(), "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    return f"üèÉ –ë–µ–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {day}:\n{run}"

def format_exercises(exercises):
    return [f"{link_map.get(ex, ex)} ‚Äî {reps}" for ex, reps in exercises.items()]

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
dp.include_router(dp)
