import logging
import os
import json
import datetime
import calendar
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.callback_data import CallbackData
from aiogram.contrib.middlewares.logging import LoggingMiddleware

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
log = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TrainingStates(StatesGroup):
    choosing_day_hockey = State()
    choosing_day_running = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

link_map = load_json("data/link_map.json")
exercise_inventory = load_json("data/exercise_inventory.json")
workout_sets = load_json("data/workout_sets.json")
run_plan = load_json("data/run.json")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["–•–æ–∫–∫–µ–π–Ω—É—é!", "–ë–µ–≥–æ–≤—É—é!"]
    keyboard.add(*buttons)
    return keyboard

def create_day_keyboard():
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞",
            "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    keyboard.add(*(types.KeyboardButton(day) for day in days))
    return keyboard

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_exercises(exercises):
    formatted = []
    for ex, reps in exercises.items():
        ex_with_link = link_map.get(ex, ex)
        formatted.append(f"{ex_with_link} ‚Äî {reps}")
    return formatted

def translate_day(day_ru):
    translation = {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "MONDAY",
        "–í—Ç–æ—Ä–Ω–∏–∫": "TUESDAY",
        "–°—Ä–µ–¥–∞": "WEDNESDAY",
        "–ß–µ—Ç–≤–µ—Ä–≥": "THURSDAY",
        "–ü—è—Ç–Ω–∏—Ü–∞": "FRIDAY",
        "–°—É–±–±–æ—Ç–∞": "SATURDAY",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "SUNDAY"
    }
    return translation.get(day_ru, "MONDAY")

def today_day():
    return calendar.day_name[datetime.date.today().weekday()].upper()

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def build_workout(selected_day=None):
    selected_day = selected_day or today_day()
    msg_intro = f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {selected_day}:\n"

    special_days = {
        "TUESDAY": "–°–µ–≥–æ–¥–Ω—è –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí",
        "THURSDAY": "–°–µ–≥–æ–¥–Ω—è –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí"
    }

    if selected_day in special_days:
        return special_days[selected_day]

    today_set = workout_sets.get(selected_day, {})
    exercise_msg = "\n".join([
        f"{k}:\n" + "\n".join(f"  ‚ñ™Ô∏è {l}" for l in format_exercises(v))
        for k, v in today_set.items()
    ])

    return f"{msg_intro}\n{exercise_msg}"

def build_running(selected_day=None):
    selected_day = selected_day or today_day()
    week_runs = run_plan.get("1-—è –Ω–µ–¥–µ–ª—è", {})
    daily_run = week_runs.get(selected_day, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
    return f"*–ë–µ–≥ {selected_day}:*\n{daily_run}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', reply_markup=create_main_keyboard())

async def hockey_train(message: types.Message, state: FSMContext):
    await TrainingStates.choosing_day_hockey.set()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=create_day_keyboard())

async def running_train(message: types.Message, state: FSMContext):
    await TrainingStates.choosing_day_running.set()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=create_day_keyboard())

async def process_hockey_day(message: types.Message, state: FSMContext):
    await state.finish()
    day_en = translate_day(message.text)
    await message.reply(build_workout(day_en), parse_mode="Markdown")

async def process_running_day(message: types.Message, state: FSMContext):
    await state.finish()
    day_en = translate_day(message.text)
    await message.reply(build_running(day_en), parse_mode="Markdown")

async def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(hockey_train, text='–•–æ–∫–∫–µ–π–Ω—É—é!', state="*")
    dp.register_message_handler(running_train, text='–ë–µ–≥–æ–≤—É—é!', state="*")
    dp.register_message_handler(process_hockey_day, state=TrainingStates.choosing_day_hockey)
    dp.register_message_handler(process_running_day, state=TrainingStates.choosing_day_running)

async def process_event(event, dp: Dispatcher):
    update = json.loads(event['body'])
    log.debug('Update: %s', update)
    Bot.set_current(dp.bot)
    await dp.process_update(types.Update.to_object(update))

async def handler(event, context):
    if event.get('httpMethod') == 'POST':
        token = os.environ.get('TELEGRAM_TOKEN')
        if not token:
            log.error("TELEGRAM_TOKEN is not set")
            return {'statusCode': 500, 'body': 'Internal Server Error'}

        bot = Bot(token)
        dp = Dispatcher(bot)
        dp.middleware.setup(LoggingMiddleware())

        await register_handlers(dp)
        await process_event(event, dp)

        return {'statusCode': 200, 'body': 'ok'}

    return {'statusCode': 405, 'body': 'Method Not Allowed'}
