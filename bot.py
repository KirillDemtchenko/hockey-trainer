import logging
import os
import json
import datetime
import calendar

from aiogram import Bot, Dispatcher, types

# –õ–æ–≥–≥–µ—Ä
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON
def load_json(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."""
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
def format_exercises(exercises):
    link_map = {
        "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–µ –≤—ã–ø–∞–¥—ã": "[–ë–æ–ª–≥–∞—Ä—Å–∫–∏–µ –≤—ã–ø–∞–¥—ã](https://ya.ru)",
        "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª–µ–∂–∞ –ø–æ–¥ —É–≥–ª–æ–º –≤–≤–µ—Ä—Ö": "[–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª–µ–∂–∞ –ø–æ–¥ —É–≥–ª–æ–º –≤–≤–µ—Ä—Ö](https://www.youtube.com/watch?v=86HgEDCwgok)"
    }
    formatted_exercises = []
    for ex, reps in exercises.items():
        ex_with_link = link_map.get(ex, ex)
        formatted_exercises.append(f"{ex_with_link} ‚Äî {reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
    return formatted_exercises

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')

    keyboard_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    btns_text = ('–•–æ–∫–∫–µ–π–Ω—É—é!', '–ë–µ–≥–æ–≤—É—é!')
    keyboard_markup.row(*(types.KeyboardButton(text) for text in btns_text))

    await message.reply("–ö–∞–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=keyboard_markup)

async def hockey_train(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö–æ–∫–∫–µ–π–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π"""
    await message.reply(build_workout(), parse_mode="Markdown")

async def running_train(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–µ–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π"""
    await message.reply(build_running(), parse_mode="Markdown")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(hockey_train, text='–•–æ–∫–∫–µ–π–Ω—É—é!')
    dp.register_message_handler(running_train, text='–ë–µ–≥–æ–≤—É—é!')
    log.debug('Handlers are registered.')

async def process_event(event, dp: Dispatcher):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ Yandex.Cloud"""
    update = json.loads(event['body'])
    log.debug('Update: %s', update)

    Bot.set_current(dp.bot)
    await dp.process_update(types.Update.to_object(update))

async def handler(event, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π Yandex.Cloud"""
    if event.get('httpMethod') == 'POST':
        token = os.environ.get('TELEGRAM_TOKEN')
        if not token:
            log.error("TELEGRAM_TOKEN is not set")
            return {'statusCode': 500, 'body': 'Internal Server Error'}

        bot = Bot(token)
        dp = Dispatcher(bot)

        await register_handlers(dp)
        await process_event(event, dp)

        return {'statusCode': 200, 'body': 'ok'}
    
    return {'statusCode': 405, 'body': 'Method Not Allowed'}

# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def build_workout():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –¥–µ–Ω—å"""
    exercises_set = load_json("data/exercise_inventory.json")
    workout_sets = load_json("data/workout_sets.json")

    msg_intro = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n"
    today = today_day()

    special_days = {
        "TUESDAY": "–°–µ–≥–æ–¥–Ω—è –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí",
        "THURSDAY": "–°–µ–≥–æ–¥–Ω—è –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí"
    }

    if today in special_days:
        return special_days[today]
    
    today_set = workout_sets.get(today, {})
    exercise_msg = "\n".join([
        f"{k}:\n" + "\n".join(f"  ‚ñ™Ô∏è {l}" for l in format_exercises(v))
        for k, v in today_set.items()
    ])

    return f"{msg_intro}\n{exercise_msg}"

def build_running():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –±–µ–≥–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    week_runs = load_json("data/run.json")
    run = week_runs.get("1-—è –Ω–µ–¥–µ–ª—è", {})

    return "\n".join([f"{k}:\n{v}\n" for k, v in run.items()])

def today_day():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
    return calendar.day_name[datetime.date.today().weekday()].upper()

def dict_intersection(d1, d2):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π"""
    return {key: d2.get(key, d1[key]) for key in d1.keys() & d2.keys()}
