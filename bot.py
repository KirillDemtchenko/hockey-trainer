import logging
import os
import json
import datetime
from aiogram import Bot, Dispatcher, types

# –õ–æ–≥–≥–µ—Ä
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
            log.debug(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
            return data
    except (FileNotFoundError, json.JSONDecodeError) as e:
        log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
link_map = load_json("data/link_map.json")
workout_sets = load_json("data/workout_sets.json")
day_info = load_json("data/day_info.json")

# –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
ru_to_code = {}
if day_info:
    ru_to_code = {v["ru"].capitalize(): k for k, v in day_info.items()}
    log.debug(f"–°–æ–∑–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å ru_to_code: {ru_to_code}")
else:
    log.warning("–§–∞–π–ª day_info.json –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
def format_exercises(exercises):
    formatted = []
    for ex, reps in exercises.items():
        if ex not in link_map:
            log.warning(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '{ex}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        formatted.append(f"{link_map.get(ex, ex)} ‚Äî {reps}")
    return formatted

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')

    keyboard = types.ReplyKeyboardMarkup(
        row_width=1,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    keyboard.add(types.KeyboardButton("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
    keyboard.add(types.KeyboardButton("–í—ã–±–æ—Ä –¥–Ω—è"))
    await message.reply("–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", reply_markup=keyboard)

async def hockey_train(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        row_width=3,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    days = [types.KeyboardButton(day) for day in ru_to_code.keys()]
    keyboard.add(*days)
    keyboard.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)

async def handle_day_selection(message: types.Message):
    selected_day_ru = message.text.capitalize()
    selected_day_code = ru_to_code.get(selected_day_ru)

    if not selected_day_code:
        await message.reply(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    workout = build_workout(selected_day_code)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    keyboard = types.ReplyKeyboardMarkup(
        row_width=1,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    keyboard.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))

    await message.reply(
        workout,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

# === –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ===
async def today_workout(message: types.Message):
    week_num = get_week_index() + current_week_offset
    week_data = get_workout_for_week(week_num)
    if not week_data:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏.")
        return

    today = datetime.date.today()
    days_ru = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    today_ru = days_ru[today.weekday()]

    for day in week_data.get("days", []):
        if day["day"] == today_ru:
            msg = f"*–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today_ru}):*\n"
            for ex in day.get("exercises", []):
                msg += f"  ‚ñ™Ô∏è {ex}\n"
            await message.reply(msg, parse_mode="Markdown")
            return

    await message.reply(f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today_ru}) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç üåø")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞
    dp.register_message_handler(
        hockey_train,
        text=['–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
    )
    dp.register_message_handler(
        handle_day_selection,
        text=list(ru_to_code.keys())
    )
    dp.register_message_handler(show_current_week, commands=['week'])
    dp.register_message_handler(show_next_week, commands=['next'])
    dp.register_message_handler(show_prev_week, commands=['prev'])
    dp.register_message_handler(goto_week, commands=['goto'])
    dp.register_message_handler(today_workout, commands=['today'])
    dp.register_message_handler(today_workout, text=["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"])
    dp.register_message_handler(return_to_menu, text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    log.debug('Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

async def process_event(event, dp: Dispatcher):
    update = json.loads(event['body'])
    log.debug('Update: %s', update)
    Bot.set_current(dp.bot)
    await dp.process_update(types.Update.to_object(update))

async def handler(event, context):
    if event.get('httpMethod') == 'POST':
        token = os.environ.get('TELEGRAM_TOKEN')
        if not token:
            log.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return {'statusCode': 500, 'body': 'Internal Server Error'}

        bot = Bot(token)
        dp = Dispatcher(bot)
        await register_handlers(dp)
        await process_event(event, dp)
        return {'statusCode': 200, 'body': 'ok'}

    return {'statusCode': 405, 'body': 'Method Not Allowed'}

# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def build_workout(day=None):
    if day is None:
        day = today_day()

    day_data = day_info.get(day, {})
    msg_intro = f"üí™ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {day_data.get('ru', day.lower())}:*\n\n"

    special_days = {
        "TUESDAY": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 7:30! üèí",
        "THURSDAY": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 7:30! üèí"
    }

    if day in special_days:
        # –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        return f"*{special_days[day]}*"

    today_set = workout_sets.get(day, {})

    if not today_set:
        return f"{msg_intro}–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç üåø"

    exercise_msg = "\n".join([
        f"*{k}:*\n" + "\n".join(f"  ‚ñ™Ô∏è {l}" for l in format_exercises(v))
        for k, v in today_set.items()
    ])

    return f"{msg_intro}{exercise_msg}"

def today_day():
    return datetime.date.today().strftime("%A").upper()

def dict_intersection(d1, d2):
    return {key: d2.get(key, d1[key]) for key in d1.keys() & d2.keys()}

# === –†–∞–±–æ—Ç–∞ —Å –Ω–µ–¥–µ–ª—è–º–∏ –∏ –∏–Ω–¥–µ–∫—Å–æ–º ===
WORKOUTS_DIR = os.path.join("data", "workouts")
INDEX_FILE = os.path.join(WORKOUTS_DIR, "weeks_index.json")
START_DATE = datetime.date(2024, 1, 1)  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ env –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥

def get_week_index(today=None):
    if today is None:
        today = datetime.date.today()
    delta = today - START_DATE
    week_num = delta.days // 7  # 0 ‚Äî –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è
    return week_num

def get_weeks_list():
    try:
        with open(INDEX_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ weeks_index.json: {e}")
        return []

def get_week_filename(week_num):
    weeks = get_weeks_list()
    if not weeks:
        return None
    week_num = week_num % len(weeks)  # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º
    return weeks[week_num]

def get_workout_for_week(week_num):
    week_filename = get_week_filename(week_num)
    if not week_filename:
        return None
    filepath = os.path.join(WORKOUTS_DIR, week_filename)
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filepath}: {e}")
        return None

def format_week_workout(week_num):
    week_data = get_workout_for_week(week_num)
    if not week_data:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–µ–ª–∏ {week_num + 1}"
    msg = f"*–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é {week_num + 1}:*\n\n"
    for day in week_data.get("days", []):
        msg += f"*{day['day']}:*\n"
        for ex in day.get("exercises", []):
            msg += f"  ‚ñ™Ô∏è {ex}\n"
        msg += "\n"
    return msg

# === –ö–æ–º–∞–Ω–¥–∞ /week ===
async def show_current_week(message: types.Message):
    week_num = get_week_index()
    msg = format_week_workout(week_num)
    await message.reply(msg, parse_mode="Markdown")

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/serverless) ===
current_week_offset = 0

async def show_next_week(message: types.Message):
    global current_week_offset
    current_week_offset += 1
    week_num = get_week_index() + current_week_offset
    msg = format_week_workout(week_num)
    await message.reply(msg, parse_mode="Markdown")

async def show_prev_week(message: types.Message):
    global current_week_offset
    current_week_offset -= 1
    week_num = get_week_index() + current_week_offset
    msg = format_week_workout(week_num)
    await message.reply(msg, parse_mode="Markdown")

async def goto_week(message: types.Message):
    global current_week_offset
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /goto <–Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏>")
            return
        goto_num = int(parts[1]) - 1
        weeks = get_weeks_list()
        await message.reply(f"weeks: {weeks}")  # –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if not (0 <= goto_num < len(weeks)):
            await message.reply(f"–ù–µ–¥–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(weeks)}")
            return
        # –°—á–∏—Ç–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        current_week_offset = goto_num - get_week_index()
        msg = format_week_workout(goto_num)
        await message.reply(msg, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}\n–ò—Å–ø–æ–ª—å–∑—É–π: /goto <–Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏>")

async def return_to_menu(message: types.Message):
    await start(message)
