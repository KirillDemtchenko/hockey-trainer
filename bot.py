import logging
import os
import json
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TrainingStates(StatesGroup):
    choosing_day = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_json(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

link_map = load_json("data/link_map.json")
workout_sets = load_json("data/workout_sets.json")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–•–æ–∫–∫–µ–π–Ω—É—é!"))
    return keyboard

def create_day_keyboard():
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞",
            "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.add(*[KeyboardButton(day) for day in days])
    return keyboard

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_exercises(exercises):
    return [f"{link_map.get(ex, ex)} ‚Äî {reps}" for ex, reps in exercises.items()]

def translate_day(ru_day):
    days = {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "MONDAY",
        "–í—Ç–æ—Ä–Ω–∏–∫": "TUESDAY",
        "–°—Ä–µ–¥–∞": "WEDNESDAY",
        "–ß–µ—Ç–≤–µ—Ä–≥": "THURSDAY",
        "–ü—è—Ç–Ω–∏—Ü–∞": "FRIDAY",
        "–°—É–±–±–æ—Ç–∞": "SATURDAY",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "SUNDAY"
    }
    return days.get(ru_day, "MONDAY")

def today_day():
    return datetime.datetime.now().strftime("%A").upper()

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
def build_workout(selected_day=None):
    selected_day = selected_day or today_day()
    special_days = {
        "TUESDAY": "–°–µ–≥–æ–¥–Ω—è –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí",
        "THURSDAY": "–°–µ–≥–æ–¥–Ω—è –ª—ë–¥ –≤ –ê—Ä–µ–Ω–µ 8:00! üèí"
    }

    if selected_day in special_days:
        return special_days[selected_day]

    workout = workout_sets.get(selected_day, {})
    msg = [f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {selected_day}:\n"]
    for category, exercises in workout.items():
        msg.append(f"{category}:")
        msg.extend([f"  ‚ñ™Ô∏è {ex}" for ex in format_exercises(exercises)])
    return "\n".join(msg)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!",
        reply_markup=create_main_keyboard()
    )

@dp.message_handler(text="–•–æ–∫–∫–µ–π–Ω—É—é!")
async def hockey_selected(message: types.Message, state: FSMContext):
    await TrainingStates.choosing_day.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=create_day_keyboard())

@dp.message_handler(state=TrainingStates.choosing_day)
async def process_day(message: types.Message, state: FSMContext):
    await state.finish()
    day_en = translate_day(message.text)
    await message.answer(build_workout(day_en), parse_mode="Markdown")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
